{"version":3,"sources":["Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","props","handleClick","bind","evt","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","hasWon","board","createBoard","flipCellsAround","r","nrows","line","c","ncols","push","Math","random","chanceLightStartsOn","coord","console","log","split","map","Number","y","x","flipCell","every","row","cell","setState","tblBoard","toString","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAuCeA,E,kDArBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,+CAMnB,SAAYC,GAEVC,KAAKJ,MAAMK,sB,oBAGb,WACE,IAAIC,EAAU,QAAUF,KAAKJ,MAAMO,MAAQ,YAAc,IAEzD,OACI,oBAAIC,UAAWF,EAASG,QAASL,KAAKH,kB,GAhB3BS,aCWbC,G,wDAMJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IAEDY,MAAQ,CACXC,QAAO,EACPC,MAAM,EAAKC,eAEb,EAAKC,gBAAiB,EAAKA,gBAAgBd,KAArB,gBAPL,E,+CAYnB,WAIE,IAFA,IAAIY,EAAQ,GAEHG,EAAI,EAAEA,EAAEb,KAAKJ,MAAMkB,MAAMD,IAAI,CAEpC,IADA,IAAIE,EAAO,GACHC,EAAI,EAAEA,EAAEhB,KAAKJ,MAAMqB,MAAMD,IAC/BD,EAAKG,KAAKC,KAAKC,SAASpB,KAAKJ,MAAMyB,qBAErCX,EAAMQ,KAAKH,GAEb,OAAOL,I,6BAKT,SAAgBY,GACdC,QAAQC,IAAI,OAAOF,GADE,MAEAtB,KAAKJ,MAArBkB,EAFgB,EAEhBA,MAAOG,EAFS,EAETA,MACRP,EAAQV,KAAKQ,MAAME,MAHF,EAIRY,EAAMG,MAAM,KAAKC,IAAIC,QAJb,mBAIhBC,EAJgB,KAIbC,EAJa,KAOrB,SAASC,EAASF,EAAGC,GAGfA,GAAK,GAAKA,EAAIZ,GAASW,GAAK,GAAKA,EAAId,IACvCJ,EAAMkB,GAAGC,IAAMnB,EAAMkB,GAAGC,IAG5BC,EAASF,EAAEC,GACXC,EAASF,EAAE,EAAEC,GACbC,EAASF,EAAE,EAAEC,GACbC,EAASF,EAAEC,EAAE,GACbC,EAASF,EAAEC,EAAE,GACb,IAAIpB,EAASC,EAAMqB,OAAM,SAAAC,GAAG,OAAEA,EAAID,OAAM,SAAAE,GAAI,OAAGA,QAC/CjC,KAAKkC,SAAS,CAACxB,MAAMA,EAAMD,OAAOA,M,oBAOpC,WAAU,IAAD,OACP,GAAGT,KAAKQ,MAAMC,OACZ,OAAO,0CAOT,IADA,IAAI0B,EAAW,GACPP,EAAI,EAAEA,EAAE5B,KAAKJ,MAAMkB,MAAMc,IAAI,CAEnC,IADA,IAAII,EAAM,GADyB,WAE3BH,GACN,IAAIP,EAAQO,EAAEO,WAAW,IAAIR,EAAEQ,WAC/BJ,EAAId,KAAK,cAAC,EAAD,CAAMf,MAAO,EAAKK,MAAME,MAAMmB,GAAGD,GAAgB3B,kBAAmB,kBAAI,EAAKW,gBAAgBU,KAAnDA,KAF7CO,EAAI,EAAEA,EAAE7B,KAAKJ,MAAMqB,MAAMY,IAAK,EAA9BA,GAIRM,EAASjB,KAAK,6BAAKc,KAErB,OACE,gCACE,qBAAK5B,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,iBACA,uBAAOA,UAAU,QAAjB,SACE,gCACG+B,a,GApFO7B,cAAdC,EACG8B,aAAe,CACpBvB,MAAM,EACNG,MAAM,EACNI,oBAAoB,IAyFTd,QCzGA+B,G,kKATb,WACE,OACE,qBAAKlC,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUE,cCMEiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.458fa8b9.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport \"./Cell.css\"\n\n\n/** A single cell on the board.\n *\n * This has no state --- just two props:\n *\n * - flipCellsAroundMe: a function rec'd from the board which flips this\n *      cell and the cells around of it\n *\n * - isLit: boolean, is this cell lit?\n *\n * This handles clicks --- by calling flipCellsAroundMe\n *\n **/\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nclass Board extends Component {\n  static defaultProps = {\n    nrows:5,\n    ncols:5,\n    chanceLightStartsOn:0.4\n  }\n  constructor(props) {\n    super(props);\n    // TODO: set initial state\n    this.state = {\n      hasWon:false,\n      board:this.createBoard()\n    }\n    this.flipCellsAround =this.flipCellsAround.bind(this)\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    \n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let r = 0;r<this.props.nrows;r++){\n      let line = [];\n      for(let c = 0;c<this.props.ncols;c++){\n        line.push(Math.random()<this.props.chanceLightStartsOn)\n      }\n      board.push(line);\n    }\n    return board;\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    console.log(\"flip\",coord)\n    let {nrows, ncols} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split('-').map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y,x)\n    flipCell(y+1,x)\n    flipCell(y-1,x)\n    flipCell(y,x+1)\n    flipCell(y,x-1)\n    let hasWon = board.every(row=>row.every(cell=>!cell))\n    this.setState({board:board,hasWon:hasWon})\n    // TODO: flip this cell and the cells around it\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n   //this.setState({board, hasWon});\n  }\n  /** Render game board or winning message. */\n  render() {\n    if(this.state.hasWon){\n      return <h1>You Win!</h1>\n    }\n    // if the game is won, just show a winning msg & render nothing else\n    // TODO\n    // make table board\n    // TODO\n    let tblBoard = [];\n    for(let y = 0;y<this.props.nrows;y++){\n      let row = [];\n      for(let x = 0;x<this.props.ncols;x++){\n        let coord = x.toString()+'-'+y.toString()\n        row.push(<Cell isLit={this.state.board[x][y]} key={coord} flipCellsAroundMe={()=>this.flipCellsAround(coord)}/>)//use arrow function to pass a func has argument\n      }\n      tblBoard.push(<tr>{row}</tr>)\n    }\n    return(\n      <div >\n        <div className='neon-orange'>LIGHTS</div>\n        <div className='neon-blue'>OUT</div>\n        <table className=\"Board\">\n          <tbody>\n            {tblBoard}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n/** Simple app that just shows the LightsOut game. */\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}